{"name": "cookies_查询余额", "status": "failed", "statusDetails": {"message": "AssertionError: assert not {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}}\n +  where {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}} = <built-in method get of DeepDiff object at 0x00000000047B2620>('values_changed', None)\n +    where <built-in method get of DeepDiff object at 0x00000000047B2620> = {'dictionary_item_added': [root['data']], 'values_changed': {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}}}.get\n +      where {'dictionary_item_added': [root['data']], 'values_changed': {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}}} = DeepDiff({'code': '0', 'message': 'success'}, {'code': '1', 'data': None, 'message': '用户不合法'})", "trace": "self = <scripts.test_case.TestCase object at 0x0000000003894128>\nitem = {'case_num': 'neeo_004', 'cookies': 'neeo_003', 'data': '', 'except': '{\"code\":\"0\",\"message\":\"success\"}', ...}\n\n    @pytest.mark.parametrize(\"item\", excel_data_list)\n    def test_case(self, item):\n        logger().info(\"正在进行断言\")\n        except_data, result = RequestsOperate(current_case=item, all_excel_data_list=excel_data_list).get_response_msg()\n        # print(DeepDiff(except_data, result))\n        allure.dynamic.title(item['title'])\n        allure.dynamic.description(\n            \"<b style='color:red'>请求的url:</b>{0}<hr />\"\n            \"<b style='color:red'>预期值:</b>{1}<hr />\"\n            \"<b style='color:red'>实际执行结果:</b>{2}<hr />\".format(item[\"url\"], item[\"except\"], result)\n        )\n>       assert not DeepDiff(except_data, result).get(\"values_changed\", None)\nE       assert not {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}}\nE        +  where {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}} = <built-in method get of DeepDiff object at 0x00000000047B2620>('values_changed', None)\nE        +    where <built-in method get of DeepDiff object at 0x00000000047B2620> = {'dictionary_item_added': [root['data']], 'values_changed': {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}}}.get\nE        +      where {'dictionary_item_added': [root['data']], 'values_changed': {\"root['code']\": {'new_value': '1', 'old_value': '0'}, \"root['message']\": {'new_value': '用户不合法', 'old_value': 'success'}}} = DeepDiff({'code': '0', 'message': 'success'}, {'code': '1', 'data': None, 'message': '用户不合法'})\n\nscripts\\test_case.py:30: AssertionError"}, "description": "<b style='color:red'>请求的url:</b>http://www.neeo.cc:6002/pinter/bank/api/query<hr /><b style='color:red'>预期值:</b>{\"code\":\"0\",\"message\":\"success\"}<hr /><b style='color:red'>实际执行结果:</b>{'code': '1', 'message': '用户不合法', 'data': None}<hr />", "attachments": [{"name": "log", "source": "2e08784c-5804-4f9b-878c-5c5871a7d9e0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "item", "value": "{'case_num': 'neeo_004', 'title': 'cookies_查询余额', 'url': 'http://www.neeo.cc:6002/pinter/bank/api/query', 'method': 'get', 'params': '{\"userName\":\"admin\"}', 'data': '', 'json': '', 'cookies': 'neeo_003', 'headers': '', 'except': '{\"code\":\"0\",\"message\":\"success\"}'}"}], "start": 1615541370741, "stop": 1615541370824, "uuid": "5cc35a60-f210-4aab-acc4-3f8597a6fd38", "historyId": "b55a4bf00ea257eda2592d0a042d0979", "testCaseId": "26c298dcd4e08901cbba1d289c15c556", "fullName": "scripts.test_case.TestCase#test_case", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "tian"}, {"name": "thread", "value": "48388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test_case"}]}